<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kindnit.dao.BlogMapper">
    <!--namespace根据自己需要创建的的mapper的路径和名称填写-->
    <resultMap id="blogMap" type="com.kindnit.dto.BlogQuery">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="updateTime" column="update_time"/>
        <result property="recommend" column="recommend"/>
        <result property="typeId" column="type_id"/>
        <result property="published" column="published"/>
        <association property="type" javaType="Type">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
        </association>
    </resultMap>

    <select id="getAllBlogQuery" resultMap="blogMap">
        select b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name
        from t_blog b left outer join t_type t
        on b.type_id = t.id
        order by b.update_time desc
    </select>

    <select id="searchByTitleOrTypeOrRecommend" parameterType="com.kindnit.dto.SearchBlog" resultMap="blogMap">
        <bind name="pattern" value="'%' + title + '%'" />
        select b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name
        from t_blog b ,t_type t
        <where>
            <if test="1 == 1">
                b.type_id = t.id
            </if>
            <if test="typeId != null and typeId != ''">
                and b.type_id = #{typeId}
            </if>
            <if test="recommend != null and recommend != ''">
                and b.recommend = #{recommend}
            </if>
            <if test="title != null and title != ''">
                and b.title like #{pattern}
            </if>
        </where>
    </select>

    <insert id="saveBlog" parameterType="Blog">
        insert into t_blog (id,title, content, first_picture, flag,
                                         views, appreciation, share_statement, commentabled,published,
                                         recommend, create_time, update_time, type_id,tag_ids, user_id, description)
        values (#{id},#{title},#{content},#{firstPicture},#{flag},#{views},#{appreciation},
                #{shareStatement},#{commentabled},#{published},#{recommend},#{createTime},
                #{updateTime},#{typeId},#{tagIds},#{userId},#{description});
    </insert>

    <insert id="saveBlogAndTag" parameterType="com.kindnit.dto.BlogAndTag">
        insert into t_blog_tags (tag_id, blog_id) values (#{tagId},#{blogId});
    </insert>

    <select id="getBlogById" resultType="com.kindnit.dto.ShowBlog" >
        select b.id, b.published, b.flag, b.title, b.content, b.type_id as typeId,
               b.tag_ids as tagIds,b.first_picture as firstPicture,b.description,b.recommend,b.share_statement,
               b.appreciation,b.commentabled
        from t_blog b
        where  b.id = #{id};
    </select>

    <update id="updateBlog" parameterType="com.kindnit.dto.ShowBlog">
        update t_blog set published = #{published},flag = #{flag} ,
        title = #{title}, content = #{content}, type_id = #{typeId}, tag_ids = #{tagIds},
        first_picture = #{firstPicture} , description = #{description} , recommend = #{recommend} ,
        share_statement = #{shareStatement}, appreciation = #{appreciation},
        commentabled = #{commentabled} ,update_time = #{updateTime}
        where id = #{id};
    </update>

    <delete id="deleteBlog">
        delete from t_blog b where b.id = #{id};
    </delete>

    <delete id="deleteBlogAndTag">
        delete from t_blog_tags where blog_id = #{blogId}
    </delete>

    <!--客户端页面功能实现-->
    <resultMap id="firstPageBlog" type="com.kindnit.dto.FirstPageBlog">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="firstPicture" column="first_picture"/>
        <result property="views" column="views"/>
        <result property="updateTime" column="update_time"/>
        <result property="description" column="description"/>
        <result property="typeName" column="name"/>
        <result property="nickname" column="nickname"/>
        <result property="avatar" column="avatar"/>
    </resultMap>

    <select id="getAllFirstPageBlog" resultMap="firstPageBlog">
        select b.id,b.title,b.first_picture, b.views,b.update_time,b.description,
               t.name,
               u.nickname, u.avatar
        from t_blog b, t_type t,t_user u
        where b.type_id = t.id
          and  u.id = b.user_id
          and  b.published = 1
        order by b.update_time desc
    </select>

    <select id="getAllRecommendBlog" resultType="com.kindnit.dto.RecommendBlog">
        select id,title,recommend
        from t_blog
        where recommend = 1
          and published = 1
        ORDER BY
          t_blog.update_time DESC LIMIT 3
    </select>

    <select id="getSearchBlog" resultMap="firstPageBlog">
        <bind name="pattern" value="'%' + query + '%'" />
        select b.id,b.title,b.first_picture, b.views,b.update_time,b.description,
        t.name ,
        u.nickname, u.avatar
        from t_blog b, t_type t,t_user u
        where b.type_id = t.id
        and  u.id = b.user_id
        and  b.published = 1
        and (b.title like #{pattern}
        or b.content like  #{pattern})
        order by b.update_time desc
    </select>

    <select id="getByTypeId" resultMap="firstPageBlog">
        select b.id,b.title,b.first_picture, b.views,b.update_time,b.description,
               t.name ,
               u.nickname, u.avatar
        from t_blog b, t_type t,t_user u
        where b.type_id = t.id and u.id = b.user_id and b.type_id = #{typeId} order by b.update_time desc
    </select>

    <select id="getByTagId" resultType="com.kindnit.dto.FirstPageBlog">
        select b.id,b.title,b.first_picture as firstPicture,b.views,b.update_time as updateTime,b.description,
               t.name as typeName,
               u.nickname,u.avatar
        from t_blog b, t_type t, t_user u,
             t_blog_tags tb, t_tag t1
        where b.type_id = t.id
          and u.id = b.user_id
          and tb.blog_id = b.id
          and tb.tag_id = t1.id
          and t1.id = #{tagId}
        order by b.update_time desc
    </select>

    <resultMap id="detailedBlog" type="com.kindnit.dto.DetailedBlog">
        <id property="id" column="bid"/>
        <result property="firstPicture" column="first_picture"/>
        <result property="flag" column="flag"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="views" column="views"/>
        <result property="updateTime" column="update_time"/>
        <result property="commentabled" column="commentabled"/>
        <result property="shareStatement" column="share_statement"/>
        <result property="appreciation" column="appreciation"/>
        <result property="nickname" column="nickname"/>
        <result property="avatar" column="avatar"/>
        <collection property="tags" ofType="Tag">
            <id property="id" column="tid"/>
            <result property="name" column="name"/>
        </collection>
    </resultMap>

    <select id="getDetailedBlog" resultMap="detailedBlog">
        select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar,
               t.id tid ,t.name
        from t_blog b,t_user u,t_tag t,t_blog_tags tb
        where b.user_id = u.id
          and tb.blog_id = b.id
          and tb.tag_id = t.id
          and  b.id = #{id}
    </select>

    <update id="updateViews" parameterType="blog">
        update t_blog b set b.views = b.views+1 where b.id = #{id}
    </update>

</mapper>
